# Stubs for tortoise.fields (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import datetime
import json
from tortoise.utils import QueryAsyncIterator
from typing import Any, Optional, Union

CASCADE: str
RESTRICT: str
SET_NULL: str
SET_DEFAULT: str
JSON_DUMPS: Any
JSON_LOADS = json.loads

class Field:
    type: Any = ...
    source_field: Any = ...
    generated: Any = ...
    pk: Any = ...
    default: Any = ...
    null: Any = ...
    unique: Any = ...
    index: Any = ...
    model_field_name: str = ...
    def __init__(self, type: Any=..., source_field: Optional[str]=..., generated: bool=..., pk: bool=..., null: bool=..., default: Any=..., unique: bool=..., index: bool=..., **kwargs: Any) -> None: ...
    def to_db_value(self, value: Any, instance: Any) -> Any: ...
    def to_python_value(self, value: Any) -> Any: ...
    @property
    def required(self): ...

class IntField(Field):
    reference: Any = ...
    pk: Any = ...
    def __init__(self, pk: bool=..., **kwargs: Any) -> None: ...

class BigIntField(Field):
    reference: Any = ...
    pk: Any = ...
    def __init__(self, pk: bool=..., **kwargs: Any) -> None: ...

class SmallIntField(Field):
    def __init__(self, **kwargs: Any) -> None: ...

class CharField(Field):
    max_length: Any = ...
    def __init__(self, max_length: int, **kwargs: Any) -> None: ...

class TextField(Field):
    def __init__(self, **kwargs: Any) -> None: ...

class BooleanField(Field):
    def __init__(self, **kwargs: Any) -> None: ...

class DecimalField(Field):
    max_digits: Any = ...
    decimal_places: Any = ...
    def __init__(self, max_digits: int, decimal_places: int, **kwargs: Any) -> None: ...

class DatetimeField(Field):
    auto_now: Any = ...
    auto_now_add: Any = ...
    def __init__(self, auto_now: bool=..., auto_now_add: bool=..., **kwargs: Any) -> None: ...
    def to_python_value(self, value: Any) -> datetime.datetime: ...
    def to_db_value(self, value: Optional[datetime.datetime], instance: Any) -> Optional[datetime.datetime]: ...

class DateField(Field):
    def __init__(self, **kwargs: Any) -> None: ...
    def to_python_value(self, value: Any) -> datetime.date: ...

class TimeDeltaField(Field):
    def __init__(self, **kwargs: Any) -> None: ...
    def to_python_value(self, value: Any) -> datetime.timedelta: ...
    def to_db_value(self, value: Optional[datetime.timedelta], instance: Any) -> Optional[int]: ...

class FloatField(Field):
    def __init__(self, **kwargs: Any) -> None: ...

class JSONField(Field):
    encoder: Any = ...
    decoder: Any = ...
    def __init__(self, encoder: Any=..., decoder: Any=..., **kwargs: Any) -> None: ...
    def to_db_value(self, value: Optional[Union[dict, list]], instance: Any) -> Optional[str]: ...
    def to_python_value(self, value: Optional[Union[str, dict, list]]) -> Optional[Union[dict, list]]: ...

class ForeignKeyField(Field):
    model_name: Any = ...
    related_name: Any = ...
    on_delete: Any = ...
    def __init__(self, model_name: str, related_name: Optional[str]=..., on_delete: Any=..., **kwargs: Any) -> None: ...

class ManyToManyField(Field):
    model_name: Any = ...
    related_name: Any = ...
    forward_key: Any = ...
    backward_key: Any = ...
    through: Any = ...
    def __init__(self, model_name: str, through: Optional[str]=..., forward_key: Optional[str]=..., backward_key: str=..., related_name: str=..., **kwargs: Any) -> None: ...

class BackwardFKRelation(Field):
    relation_field: Any = ...
    def __init__(self, type: Any, relation_field: str) -> None: ...

class RelationQueryContainer:
    model: Any = ...
    relation_field: Any = ...
    instance: Any = ...
    related_objects: Any = ...
    def __init__(self, model: Any, relation_field: str, instance: Any) -> None: ...
    def __contains__(self, item: Any) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __getitem__(self, item: Any): ...
    def __await__(self): ...
    def __aiter__(self) -> QueryAsyncIterator: ...
    def filter(self, *args: Any, **kwargs: Any): ...
    def all(self): ...
    def order_by(self, *args: Any, **kwargs: Any): ...
    def limit(self, *args: Any, **kwargs: Any): ...
    def offset(self, *args: Any, **kwargs: Any): ...

class ManyToManyRelationManager(RelationQueryContainer):
    field: Any = ...
    model: Any = ...
    instance: Any = ...
    def __init__(self, model: Any, instance: Any, m2m_field: ManyToManyField) -> None: ...
    async def add(self, *instances: Any, using_db: Any=...) -> None: ...
    async def clear(self, using_db: Any=...) -> None: ...
    async def remove(self, *instances: Any, using_db: Any=...) -> None: ...
